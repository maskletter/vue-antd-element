{"version":3,"sources":["webpack:///./src/views/chart/polyline.tsx","webpack:///./src/components/cropper.tsx"],"names":["colors","echartData2","color","tooltip","trigger","axisPointer","type","legend","data","grid","top","bottom","xAxis","axisTick","alignWithLabel","axisLine","onZero","lineStyle","label","formatter","params","value","seriesData","length","yAxis","series","name","xAxisIndex","smooth","padding","Cropper","props","content","cropper","$el","methods","getCroppedCanvas","toDataURL","this","getData","getCropBoxData","getContainerData","getImageData","setData","setDragMode","dragMode","setCropBoxData","setCanvasData","setAspectRatio","aspectRatio","Throttling","time","timeout","callback","setTimeout","viewMode","crop","e","emit","console","log","$cropper","width","height","src","String","Number","Object","modelValue","CropperModel","visible","close","onClose","Function","CropperOpen","$div","document","getElementById","createElement","id","body","appendChild","app","unmount","mount"],"mappings":"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","file":"js/chunk-be8739be.19c6d84f.js","sourcesContent":["import { defineComponent } from 'vue';\nimport { Card, Row, Col, Button } from 'ant-design-vue'\nimport Page from '../../components/admin/page'\nimport Chart from '../../components/chart'\nimport { CropperOpen } from '@/components/cropper'\nimport Br from '@/components/br';\n\n\nexport default defineComponent(() => {\n\n\n\n    var colors = ['#5793f3', '#d14a61', '#675bba'];\n\n \n\n    const echartData2 = {\n        color: colors,\n    \n        tooltip: {\n            trigger: 'none',\n            axisPointer: {\n                type: 'cross'\n            }\n        },\n        legend: {\n            data:['2015 降水量', '2016 降水量']\n        },\n        grid: {\n            top: 70,\n            bottom: 50\n        },\n        xAxis: [\n            {\n                type: 'category',\n                axisTick: {\n                    alignWithLabel: true\n                },\n                axisLine: {\n                    onZero: false,\n                    lineStyle: {\n                        color: colors[1]\n                    }\n                },\n                axisPointer: {\n                    label: {\n                        formatter: function (params: any) {\n                            return '降水量  ' + params.value\n                                + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n                        }\n                    }\n                },\n                data: ['2016-1', '2016-2', '2016-3', '2016-4', '2016-5', '2016-6', '2016-7', '2016-8', '2016-9', '2016-10', '2016-11', '2016-12']\n            },\n            {\n                type: 'category',\n                axisTick: {\n                    alignWithLabel: true\n                },\n                axisLine: {\n                    onZero: false,\n                    lineStyle: {\n                        color: colors[0]\n                    }\n                },\n                axisPointer: {\n                    label: {\n                        formatter: function (params: any) {\n                            return '降水量  ' + params.value\n                                + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n                        }\n                    }\n                },\n                data: ['2015-1', '2015-2', '2015-3', '2015-4', '2015-5', '2015-6', '2015-7', '2015-8', '2015-9', '2015-10', '2015-11', '2015-12']\n            }\n        ],\n        yAxis: [\n            {\n                type: 'value'\n            }\n        ],\n        series: [\n            {\n                name: '2015 降水量',\n                type: 'line',\n                xAxisIndex: 1,\n                smooth: true,\n                data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]\n            },\n            {\n                name: '2016 降水量',\n                type: 'line',\n                smooth: true,\n                data: [3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7]\n            }\n        ]\n    };\n\n    return () => <Page title={<text>折线图</text>}>\n        <Button type='primary' onClick={() => CropperOpen(\"wad\")}>测试点击</Button>\n        <Br />\n        <Row gutter={10}>\n            <Col span={12}>\n                <Card hoverable bodyStyle={{padding: '20px'}}>\n                    <Chart data={{\n                      xAxis: {\n                          type: 'category',\n                          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n                      },\n                      yAxis: {\n                          type: 'value'\n                      },\n                      series: [{\n                          data: [820, 932, 901, 934, 1290, 1330, 1320],\n                          type: 'line'\n                      }]\n                  }} />\n                </Card>\n            </Col>\n            <Col span={12}>\n                <Card hoverable bodyStyle={{padding: '20px'}}>\n                    <Chart data={echartData2} />\n                </Card>\n            </Col>\n        </Row>\n        \n    </Page>\n\n})","import { defineComponent, createApp, ref, onMounted, Ref } from 'vue';\nimport { Modal } from 'ant-design-vue'\nimport CropperJs from 'cropperjs'\nimport 'cropperjs/dist/cropper.css'\n\n\nexport interface CropperMethods {\n    getCroppedCanvas: () => HTMLCanvasElement\n    toDataURL: () => string\n    getData: () => Cropper.Data\n    getCropBoxData: () => Cropper.CropBoxData\n    getContainerData: () => Cropper.ContainerData\n    getImageData(): Cropper.ImageData\n    setData(data: Cropper.SetDataOptions): void\n    setDragMode(dragMode: Cropper.DragMode): void\n    setCropBoxData(data: Cropper.SetCropBoxDataOptions): void\n    setCanvasData(data: Cropper.SetCanvasDataOptions): void\n    setAspectRatio(aspectRatio: number): void\n    $cropper: CropperJs\n}\n\ninterface CropperInterface {\n\n    src?: string\n    width?: number\n    height?: number\n    cropper?: Ref<CropperMethods | undefined>\n    value?: string\n\n}\n\nconst Cropper = defineComponent((props: CropperInterface, content) => {\n\n    const $el = ref();\n    let cropper: CropperJs;\n\n    const methods = {\n        getCroppedCanvas(): HTMLCanvasElement{\n            return cropper.getCroppedCanvas()\n        },\n        toDataURL(): string{\n            return this.getCroppedCanvas().toDataURL()\n        },\n        getData(): Cropper.Data{\n            return cropper.getData()\n        },\n        getCropBoxData(): Cropper.CropBoxData{\n            return cropper.getCropBoxData()\n        },\n        getContainerData(): Cropper.ContainerData{\n            return cropper.getContainerData()\n        },\n        getImageData(): Cropper.ImageData{\n            return cropper.getImageData()\n        },\n        setData(data: Cropper.SetDataOptions): void{\n            cropper.setData(data)\n        },\n        setDragMode(dragMode: Cropper.DragMode): void{\n            cropper.setDragMode(dragMode)\n        },\n        setCropBoxData(data: Cropper.SetCropBoxDataOptions): void{\n            cropper.setCropBoxData(data)\n        },\n        setCanvasData(data: Cropper.SetCanvasDataOptions): void{\n            cropper.setCanvasData(data)\n        },\n        setAspectRatio(aspectRatio: number): void{\n            cropper.setAspectRatio(aspectRatio)\n        }\n    }\n\n    const Throttling = (time: number = 300) => {\n        let timeout: any = null;\n        return (callback: Function) => {\n            if(timeout != null) return;\n            timeout = setTimeout(() => {\n                callback()\n                timeout = null;\n            }, time)\n        }\n    }\n    \n    onMounted(() => {\n        const crop = Throttling();\n        cropper = new CropperJs($el.value, {\n            aspectRatio:  4 / 4,\n            viewMode: 1,\n            crop: (e: any) => {\n                crop(() => {\n                    content.emit('update:modelValue', methods.toDataURL())\n                    console.log(e)\n                })\n                \n                \n            }\n        })\n        if(props.cropper) {\n            props.cropper.value = {\n                ...methods,\n                $cropper: cropper\n            };\n        }\n    })\n\n    return () => <div style={{width: props.width+'px', height: props.height+'px'}}>\n        <img ref={$el} src={props.src} alt=\"\"/>\n    </div>\n\n})\n\nCropper.props = {\n    src: String,\n    width: Number,\n    height: Number,\n    cropper: Object,\n    modelValue: String,\n    value: String\n} as any\n\nconst CropperModel = defineComponent((props: { src: string, onClose?: () => void }) => {\n\n    const visible = ref(true);\n    const close = () => {\n        visible.value = false;\n        setTimeout(() => {\n            props.onClose && props.onClose();\n        }, 300)\n    }\n\n    return () => <Modal\n        visible={visible.value}\n        onOk={close}\n        onCancel={close}>\n        <Cropper src={props.src} />\n    </Modal>\n})\nCropperModel.props = {\n    onClose: Function,\n    src: String\n} as any\n\nconst CropperOpen = (src: string) => {\n\n\n    let $div = document.getElementById('cropper-dialog-div');\n    if(!$div) {\n        $div = document.createElement('div')\n        $div.id = 'cropper-dialog-div'\n        document.body.appendChild($div);\n    }\n    // $div.innerHTML = '<div id=\"cropper-dialog-wrapper\"></div>'\n    \n\n    const app = createApp(<CropperModel src={src} onClose={() => {\n        app.unmount($div as HTMLElement);\n    }} />);\n    app.mount($div);\n\n}\n\nexport { CropperOpen }\n\nexport default Cropper;"],"sourceRoot":""}