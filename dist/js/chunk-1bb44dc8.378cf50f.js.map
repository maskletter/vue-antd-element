{"version":3,"sources":["webpack:///./src/components/simplemde.tsx","webpack:///./src/views/rich-text/md.tsx"],"names":["Md","props","content","simplemde","$md","_value","modelValue","val","codemirror","setValue","readImg","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","e","type","result","readMdFile","readAsText","isMdFile","name","test","isImgFile","element","value","renderingConfig","singleLineBreaks","codeSyntaxHighlighting","on","editor","dataTransfer","files","length","getValue","clipboardData","items","item","kind","getAsFile","indexOf","emit","console","log","String"],"mappings":"iQAIMA,G,UAAK,gBAAgB,SAACC,EAA2BC,GAEnD,IAAIC,EAEEC,EAAM,eAAI,MACZC,EAAiB,GAErB,iBAAM,kBAAOJ,EAAcK,cAAY,SAACC,GACjCA,GAAOF,GACVF,EAAUK,WAAWC,SAASF,MAGlC,IAAMG,EAAU,SAACC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GACf,IAAIC,EAAS,IAAIC,WAC1BD,EAAOE,cAAcL,GACrBG,EAAOG,OAAS,SAAUC,GACzBL,EAAQ,CAACM,KAAM,MAAOjB,QAASY,EAAOM,cAKhCC,EAAa,SAACV,GACtB,OAAO,IAAIC,SAAQ,SAAAC,GAClB,IAAIC,EAAS,IAAIC,WACjBD,EAAOG,OAAS,WACfJ,EAAQ,CAACM,KAAK,KAAKjB,QAASY,EAAOM,UAEpCN,EAAOQ,WAAWX,OAKdY,EAAW,SAACC,GACjB,MAAO,cAAcC,KAAKD,IAIrBE,EAAY,SAACF,GAClB,MAAO,yBAAyBC,KAAKD,IAiDnC,OA9CA,gBAAU,WAENrB,EAAY,IAAI,IAAU,CACtBwB,QAASvB,EAAIwB,MACbC,gBAAiB,CACzBC,kBAAkB,EAClBC,wBAAwB,KAGpB5B,EAAUK,WAAWC,SAAUR,EAAcK,YAAYL,EAAM2B,OAAO,IACtEzB,EAAUK,WAAWwB,GAAG,OAAxB,yDAAgC,WAAOC,EAAaf,GAApB,4FACM,GAA/BA,EAAEgB,aAAaC,MAAMC,OADI,oDAEtBzB,EAAaO,EAAEgB,aAAaC,MAAM,IAErCT,EAAUf,EAAKa,MAJU,iCAKTd,EAAQC,GALC,OAKxBS,EALwB,OAMxBjB,EAAUK,WAAWC,SAASN,EAAUK,WAAW6B,WAAW,OAAOjB,EAAOlB,QAAQ,KAN5D,4BAOlBqB,EAASZ,EAAKa,MAPI,kCAQTH,EAAWV,GARF,QAQxBS,EARwB,OASxBjB,EAAUK,WAAWC,SAASW,EAAOlB,SATb,4CAAhC,yDAYAC,EAAUK,WAAWwB,GAAG,QAAxB,yDAAiC,WAAOC,EAAaf,GAApB,4FACzBA,EAAEoB,cADuB,oDAEzBpB,EAAEoB,cAAcC,MAFS,oDAGzBrB,EAAEoB,cAAcC,MAAM,GAHG,oDAIvBC,EAAOtB,EAAEoB,cAAcC,MAAM,GAC/BC,EALyB,oDAMZ,SAAdA,EAAKC,OAA+D,IAA5CD,EAAKE,YAAYvB,KAAKwB,QAAQ,SAN5B,kCAOCjC,EAAQ8B,EAAKE,aAPd,QAOnBtB,EAPmB,OAQzBjB,EAAUK,WAAWC,SAASN,EAAUK,WAAW6B,WAAW,OAAOjB,EAAOlB,QAAQ,KAR3D,4CAAjC,yDAWAC,EAAUK,WAAWwB,GAAG,UAAU,WAC9B3B,EAASF,EAAUK,WAAW6B,WAC9BnC,EAAQ0C,KAAK,oBAAqBvC,SAK1C,gBAAc,WAEVwC,QAAQC,IAAI,YAIT,sCAAiB,gBAAjB,wBACY1C,GADZ,aAMXJ,EAAGC,MAAQ,CACPK,WAAYyC,OACZnB,MAAOmB,QAGI,Q,wBChGA,6BAAgB,WAG3B,IAAMnB,EAAQ,eAAI,OAElB,OAAO,yBAAC,aAAD,iCAAC,QAAD,MACS,QADT,2BAEEA,EAAMA,UAFR,OAAC,4BAAD,WAKUA,EAAMA,MALhB,yCAKUA,EAAMA,MALhB","file":"js/chunk-1bb44dc8.378cf50f.js","sourcesContent":["import SimpleMDE from 'simplemde';\nimport { defineComponent, ref, onMounted, watch, onDeactivated } from 'vue';\nimport 'simplemde/dist/simplemde.min.css'\n\nconst Md = defineComponent((props: { value?: string }, content) => {\n\n    let simplemde!: SimpleMDE\n\n    const $md = ref(null);\n    let _value: string = '';\n\n    watch(() => (props as any).modelValue, (val: string) => {\n        if(val == _value) return;\n        simplemde.codemirror.setValue(val)\n    })\n\n    const readImg = (file: File) => {\n        return new Promise(resolve => {\n            var reader = new FileReader();　　　　//实例化\n\t\t\treader.readAsDataURL(file);　　　　　　//加载\n\t\t\treader.onload = function (e) {\n\t\t\t\tresolve({type: 'img', content: reader.result})\n\t\t\t}\n        })\n    }\n\n    const readMdFile = (file: File) => {\n\t\treturn new Promise(resolve => {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = () => {\n\t\t\t\tresolve({type:'md',content: reader.result})\n\t\t\t};\n\t\t\treader.readAsText(file);\n\t\t})\n    }\n    \n    //判断是否为.md文件\n\tconst isMdFile = (name: string): boolean => {\n\t\treturn /^.*[.](md)$/.test(name)\n\t}\n\n\t//判断是否为图片文件\n\tconst isImgFile = (name: string): boolean => {\n\t\treturn /^.*[.](png|gif|jpe?g)$/.test(name)\n\t}\n\n    onMounted(() => {\n        \n        simplemde = new SimpleMDE({ \n            element: $md.value as any, \n            renderingConfig: {\n\t\t\t\tsingleLineBreaks: false,\n\t\t\t\tcodeSyntaxHighlighting: true,\n\t\t\t}\n        })\n        simplemde.codemirror.setValue((props as any).modelValue||props.value||'')\n        simplemde.codemirror.on('drop', async (editor: any, e: any) => {\n            if(e.dataTransfer.files.length == 0) return;\n            const file: File = e.dataTransfer.files[0];\n            let result: any;\n            if(isImgFile(file.name)) {\n                result = await readImg(file);\n                simplemde.codemirror.setValue(simplemde.codemirror.getValue()+'![]('+result.content+')');\n            } else if(isMdFile(file.name)) {\n                result = await readMdFile(file);\n                simplemde.codemirror.setValue(result.content)\n            }\n        })\n        simplemde.codemirror.on('paste', async (editor: any, e: any) => {\n            if(!e.clipboardData) return\n            if(!e.clipboardData.items) return\n            if(!e.clipboardData.items[0]) return\n            const item = e.clipboardData.items[0]\n            if(!item) return\n            if(item.kind === 'file' && item.getAsFile().type.indexOf('image') !== -1) {\n                const result: any = await readImg(item.getAsFile());\n                simplemde.codemirror.setValue(simplemde.codemirror.getValue()+'![]('+result.content+')');\n            }\n        })\n        simplemde.codemirror.on('change', () => {\n            _value = simplemde.codemirror.getValue();\n            content.emit('update:modelValue', _value)\n\t\t})\n    })\n\n\n    onDeactivated(() => {\n        // ckeditor.destroy();\n        console.log('组件销毁了')\n    })\n\n\n    return () => <div class='md-container'>\n        <textarea ref={$md}></textarea>\n    </div>\n\n})\n\nMd.props = {\n    modelValue: String,\n    value: String\n} as any\n\nexport default Md","import { ref, defineComponent } from 'vue';\nimport Page from '@/components/admin/page';\nimport Md from '@/components/simplemde';\nimport { Card } from 'ant-design-vue';\nimport Br from '@/components/br';\n\n\nexport default defineComponent(() => {\n\n\n    const value = ref('222');\n\n    return () => <Page>\n        <Card title='编辑内容'>\n            {value.value}\n        </Card>\n        <Br />\n        <Md v-model={value.value} />\n    </Page>\n\n})"],"sourceRoot":""}