{"version":3,"sources":["webpack:///./src/components/admin/page.tsx","webpack:///./src/components/simplemde.tsx","webpack:///./src/views/rich-text/md.tsx"],"names":["GeminiScrollbar","Page","props","content","myScrollbar","scrollTop","$el","$scroll","element","value","create","_viewElement","destroy","position","background","color","height","overflow","padding","boxSizing","title","fontSize","marginBottom","letterSpacing","slots","default","type","String","Md","simplemde","$md","_value","modelValue","val","codemirror","setValue","readImg","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","e","result","readMdFile","readAsText","isMdFile","name","test","isImgFile","renderingConfig","singleLineBreaks","codeSyntaxHighlighting","on","editor","dataTransfer","files","length","getValue","clipboardData","items","item","kind","getAsFile","indexOf","emit"],"mappings":"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","file":"js/chunk-ec76ef20.d9e6460c.js","sourcesContent":["import { defineComponent, getCurrentInstance, KeepAlive, ref, ComponentInternalInstance, VNode, onUnmounted, onMounted, onActivated, inject } from 'vue';\nimport { BackTop } from 'ant-design-vue'\nimport { onBeforeRouteLeave } from 'vue-router'\nconst GeminiScrollbar = require('gemini-scrollbar')\nimport 'gemini-scrollbar/gemini-scrollbar.css'\n\n\ninterface PageInterface {\n    color?: string\n    title?: string|VNode\n}\n\nconst Page = defineComponent((props: PageInterface, content) => {\n    const scrollTop = ref(0);\n    const $el: any = ref<Element | ComponentInternalInstance | null>(null);\n    const $scroll = ref();\n    let myScrollbar: any;\n\n    // onBeforeRouteLeave((to, from, next) => {\n    //     scrollTop.value = $el.value.scrollTop;\n    //     next();\n    // })\n\n    onMounted(() => {\n        \n        myScrollbar = new GeminiScrollbar({\n            element: $scroll.value\n        }).create();\n        $el.value = myScrollbar._viewElement;\n    })\n\n    onActivated(() => {\n        // console.log(getCurrentInstance())\n    })\n\n\n    onActivated(() => {\n        scrollTop.value && (myScrollbar._viewElement.scrollTop = scrollTop.value);\n    })\n\n    onUnmounted(() => {\n        myScrollbar.destroy();\n    })\n\n\n    return () => <div style={{ position: 'relative', background: props.color, height: '100%', overflow: 'auto'}}>\n        <div ref={$scroll}>\n            <div style={{ padding: '10px 20px', boxSizing: 'border-box' }}>\n                { props.title && <div style={{fontSize: '30px', marginBottom: '20px', letterSpacing: '2px'}}>{props.title}</div> }\n                { content.slots.default && content.slots.default() }\n            </div>\n            \n        </div>\n        \n        <BackTop target={() => $el.value} />\n    </div>\n\n})\nPage.props = {\n    color: {\n        type: String,\n        default: '#f5f5f5'\n    },\n    title: {\n        type: [String, String]\n    }\n}\n\nexport default Page;","import SimpleMDE from 'simplemde';\nimport { defineComponent, ref, onMounted, watch, onDeactivated, onUnmounted } from 'vue';\nimport 'simplemde/dist/simplemde.min.css'\n\nconst Md = defineComponent((props: { value?: string }, content) => {\n\n    let simplemde!: SimpleMDE\n\n    const $md = ref(null);\n    let _value: string = '';\n\n    watch(() => (props as any).modelValue, (val: string) => {\n        if(val == _value) return;\n        simplemde.codemirror.setValue(val)\n    })\n\n    const readImg = (file: File) => {\n        return new Promise(resolve => {\n            var reader = new FileReader();　　　　//实例化\n\t\t\treader.readAsDataURL(file);　　　　　　//加载\n\t\t\treader.onload = function (e) {\n\t\t\t\tresolve({type: 'img', content: reader.result})\n\t\t\t}\n        })\n    }\n\n    const readMdFile = (file: File) => {\n\t\treturn new Promise(resolve => {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = () => {\n\t\t\t\tresolve({type:'md',content: reader.result})\n\t\t\t};\n\t\t\treader.readAsText(file);\n\t\t})\n    }\n    \n    //判断是否为.md文件\n\tconst isMdFile = (name: string): boolean => {\n\t\treturn /^.*[.](md)$/.test(name)\n\t}\n\n\t//判断是否为图片文件\n\tconst isImgFile = (name: string): boolean => {\n\t\treturn /^.*[.](png|gif|jpe?g)$/.test(name)\n\t}\n\n    onMounted(() => {\n        \n        simplemde = new SimpleMDE({ \n            element: $md.value as any, \n            renderingConfig: {\n\t\t\t\tsingleLineBreaks: false,\n\t\t\t\tcodeSyntaxHighlighting: true,\n\t\t\t}\n        })\n        simplemde.codemirror.setValue((props as any).modelValue||props.value||'')\n        simplemde.codemirror.on('drop', async (editor: any, e: any) => {\n            if(e.dataTransfer.files.length == 0) return;\n            const file: File = e.dataTransfer.files[0];\n            let result: any;\n            if(isImgFile(file.name)) {\n                result = await readImg(file);\n                simplemde.codemirror.setValue(simplemde.codemirror.getValue()+'![]('+result.content+')');\n            } else if(isMdFile(file.name)) {\n                result = await readMdFile(file);\n                simplemde.codemirror.setValue(result.content)\n            }\n        })\n        simplemde.codemirror.on('paste', async (editor: any, e: any) => {\n            if(!e.clipboardData) return\n            if(!e.clipboardData.items) return\n            if(!e.clipboardData.items[0]) return\n            const item = e.clipboardData.items[0]\n            if(!item) return\n            if(item.kind === 'file' && item.getAsFile().type.indexOf('image') !== -1) {\n                const result: any = await readImg(item.getAsFile());\n                simplemde.codemirror.setValue(simplemde.codemirror.getValue()+'![]('+result.content+')');\n            }\n        })\n        simplemde.codemirror.on('change', () => {\n            _value = simplemde.codemirror.getValue();\n            content.emit('update:modelValue', _value)\n\t\t})\n    })\n\n\n    return () => <div class='md-container'>\n        <textarea ref={$md}></textarea>\n    </div>\n\n})\n\nMd.props = {\n    modelValue: String,\n    value: String\n} as any\n\nexport default Md","import { ref, defineComponent } from 'vue';\nimport Page from '@/components/admin/page';\nimport Md from '@/components/simplemde';\nimport { Card } from 'ant-design-vue';\nimport Br from '@/components/br';\n\n\nexport default defineComponent(() => {\n\n\n    const value = ref('222');\n\n    return () => <Page>\n        <Card title='编辑内容'>\n            {value.value}\n        </Card>\n        <Br />\n        <Md v-model={value.value} />\n    </Page>\n\n})"],"sourceRoot":""}