{"version":3,"sources":["webpack:///./src/components/cropper.tsx","webpack:///./src/views/components/crop.tsx","webpack:///./src/assets/img1.png","webpack:///./src/components/admin/page.tsx"],"names":["Cropper","props","content","cropper","$el","methods","getCroppedCanvas","toDataURL","this","getData","getCropBoxData","getContainerData","getImageData","setData","data","setDragMode","dragMode","setCropBoxData","setCanvasData","setAspectRatio","aspectRatio","Throttling","time","timeout","callback","setTimeout","value","viewMode","crop","e","emit","console","log","$cropper","width","height","src","String","Number","Object","modelValue","CropperModel","visible","close","onClose","Function","$div","document","getElementById","createElement","id","body","appendChild","app","unmount","mount","cropperUrl","alert","module","exports","GeminiScrollbar","Page","myScrollbar","scrollTop","$scroll","element","create","_viewElement","destroy","position","background","color","overflow","padding","boxSizing","title","fontSize","marginBottom","letterSpacing","slots","default","type"],"mappings":"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","file":"js/chunk-6015a30f.711488ce.js","sourcesContent":["import { defineComponent, createApp, ref, onMounted, Ref } from 'vue';\nimport { Modal } from 'ant-design-vue'\nimport CropperJs from 'cropperjs'\nimport 'cropperjs/dist/cropper.css'\n\n\nexport interface CropperMethods {\n    getCroppedCanvas: () => HTMLCanvasElement\n    toDataURL: () => string\n    getData: () => Cropper.Data\n    getCropBoxData: () => Cropper.CropBoxData\n    getContainerData: () => Cropper.ContainerData\n    getImageData(): Cropper.ImageData\n    setData(data: Cropper.SetDataOptions): void\n    setDragMode(dragMode: Cropper.DragMode): void\n    setCropBoxData(data: Cropper.SetCropBoxDataOptions): void\n    setCanvasData(data: Cropper.SetCanvasDataOptions): void\n    setAspectRatio(aspectRatio: number): void\n    $cropper: CropperJs\n}\n\ninterface CropperInterface {\n\n    src?: string\n    width?: number\n    height?: number\n    cropper?: Ref<CropperMethods | undefined>\n    value?: string\n\n}\n\nconst Cropper = defineComponent((props: CropperInterface, content) => {\n\n    const $el = ref();\n    let cropper: CropperJs;\n\n    const methods = {\n        getCroppedCanvas(): HTMLCanvasElement{\n            return cropper.getCroppedCanvas()\n        },\n        toDataURL(): string{\n            return this.getCroppedCanvas().toDataURL()\n        },\n        getData(): Cropper.Data{\n            return cropper.getData()\n        },\n        getCropBoxData(): Cropper.CropBoxData{\n            return cropper.getCropBoxData()\n        },\n        getContainerData(): Cropper.ContainerData{\n            return cropper.getContainerData()\n        },\n        getImageData(): Cropper.ImageData{\n            return cropper.getImageData()\n        },\n        setData(data: Cropper.SetDataOptions): void{\n            cropper.setData(data)\n        },\n        setDragMode(dragMode: Cropper.DragMode): void{\n            cropper.setDragMode(dragMode)\n        },\n        setCropBoxData(data: Cropper.SetCropBoxDataOptions): void{\n            cropper.setCropBoxData(data)\n        },\n        setCanvasData(data: Cropper.SetCanvasDataOptions): void{\n            cropper.setCanvasData(data)\n        },\n        setAspectRatio(aspectRatio: number): void{\n            cropper.setAspectRatio(aspectRatio)\n        }\n    }\n\n    const Throttling = (time: number = 300) => {\n        let timeout: any = null;\n        return (callback: Function) => {\n            if(timeout != null) return;\n            timeout = setTimeout(() => {\n                callback()\n                timeout = null;\n            }, time)\n        }\n    }\n    \n    onMounted(() => {\n        const crop = Throttling();\n        cropper = new CropperJs($el.value, {\n            aspectRatio:  4 / 4,\n            viewMode: 1,\n            crop: (e: any) => {\n                crop(() => {\n                    content.emit('update:modelValue', methods.toDataURL())\n                    console.log(e)\n                })\n                \n                \n            }\n        })\n        if(props.cropper) {\n            props.cropper.value = {\n                ...methods,\n                $cropper: cropper\n            };\n        }\n    })\n\n    return () => <div style={{width: props.width+'px', height: props.height+'px'}}>\n        <img ref={$el} src={props.src} alt=\"\"/>\n    </div>\n\n})\n\nCropper.props = {\n    src: String,\n    width: Number,\n    height: Number,\n    cropper: Object,\n    modelValue: String,\n    value: String\n} as any\n\nconst CropperModel = defineComponent((props: { src: string, onClose?: () => void }) => {\n\n    const visible = ref(true);\n    const close = () => {\n        visible.value = false;\n        setTimeout(() => {\n            props.onClose && props.onClose();\n        }, 300)\n    }\n\n    return () => <Modal\n        visible={visible.value}\n        onOk={close}\n        onCancel={close}>\n        <Cropper src={props.src} />\n    </Modal>\n})\nCropperModel.props = {\n    onClose: Function,\n    src: String\n} as any\n\nconst CropperOpen = (src: string) => {\n\n\n    let $div = document.getElementById('cropper-dialog-div');\n    if(!$div) {\n        $div = document.createElement('div')\n        $div.id = 'cropper-dialog-div'\n        document.body.appendChild($div);\n    }\n    // $div.innerHTML = '<div id=\"cropper-dialog-wrapper\"></div>'\n    \n\n    const app = createApp(<CropperModel src={src} onClose={() => {\n        app.unmount($div as HTMLElement);\n    }} />);\n    app.mount($div);\n\n}\n\nexport { CropperOpen }\n\nexport default Cropper;","import { defineComponent, ref, onMounted } from 'vue';\r\nimport Page from '@/components/admin/page';\r\nimport Cropper, { CropperMethods, CropperOpen } from '@/components/cropper';\r\nimport { Button } from 'ant-design-vue'\r\nimport Img1 from '@/assets/img1.png'\r\nimport Br from '@/components/br';\r\n\r\n\r\n\r\nexport default defineComponent(() => {\r\n\r\n    const $cropper = ref<CropperMethods>();\r\n    const cropperUrl = ref('');\r\n\r\n    onMounted(() => {\r\n        console.log($cropper)\r\n    })\r\n\r\n    return () => <Page title='图片裁剪'>\r\n        <Cropper v-model={cropperUrl.value} cropper={$cropper} src={Img1} width={400} height={200} />\r\n        <Br />\r\n        <h3>裁剪的图片</h3>\r\n        <Br />\r\n        <img width={200} src={cropperUrl.value} alt=\"\"/>\r\n        <Button type='primary' onClick={() =>alert($cropper.value?.toDataURL())}>读取裁剪的url</Button>\r\n        <Br />\r\n        <Button type='primary' onClick={() =>CropperOpen(Img1)}>弹窗形式调用</Button>\r\n    </Page>\r\n\r\n})","module.exports = __webpack_public_path__ + \"img/img1.43dc9686.png\";","import { defineComponent, getCurrentInstance, KeepAlive, ref, ComponentInternalInstance, VNode, onUnmounted, onMounted, onActivated, inject } from 'vue';\r\nimport { BackTop } from 'ant-design-vue'\r\nimport { onBeforeRouteLeave } from 'vue-router'\r\nconst GeminiScrollbar = require('gemini-scrollbar')\r\nimport 'gemini-scrollbar/gemini-scrollbar.css'\r\n\r\n\r\ninterface PageInterface {\r\n    color?: string\r\n    title?: string|VNode\r\n}\r\n\r\nconst Page = defineComponent((props: PageInterface, content) => {\r\n    const scrollTop = ref(0);\r\n    const $el: any = ref<Element | ComponentInternalInstance | null>(null);\r\n    const $scroll = ref();\r\n    let myScrollbar: any;\r\n\r\n    // onBeforeRouteLeave((to, from, next) => {\r\n    //     scrollTop.value = $el.value.scrollTop;\r\n    //     next();\r\n    // })\r\n\r\n    onMounted(() => {\r\n        \r\n        myScrollbar = new GeminiScrollbar({\r\n            element: $scroll.value\r\n        }).create();\r\n        $el.value = myScrollbar._viewElement;\r\n    })\r\n\r\n    onActivated(() => {\r\n        // console.log(getCurrentInstance())\r\n    })\r\n\r\n\r\n    onActivated(() => {\r\n        scrollTop.value && (myScrollbar._viewElement.scrollTop = scrollTop.value);\r\n    })\r\n\r\n    onUnmounted(() => {\r\n        myScrollbar.destroy();\r\n    })\r\n\r\n\r\n    return () => <div style={{ position: 'relative', background: props.color, height: '100%', overflow: 'auto'}}>\r\n        <div ref={$scroll}>\r\n            <div style={{ padding: '10px 20px', boxSizing: 'border-box' }}>\r\n                { props.title && <div style={{fontSize: '30px', marginBottom: '20px', letterSpacing: '2px'}}>{props.title}</div> }\r\n                { content.slots.default && content.slots.default() }\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        <BackTop target={() => $el.value} />\r\n    </div>\r\n\r\n})\r\nPage.props = {\r\n    color: {\r\n        type: String,\r\n        default: '#f5f5f5'\r\n    },\r\n    title: {\r\n        type: [String, String]\r\n    }\r\n}\r\n\r\nexport default Page;"],"sourceRoot":""}